<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ecosystem-rsses on TAT - TextAndTag Documentation</title>
    <link>https://ovh.github.io/tat/ecosystem/index.xml</link>
    <description>Recent content in Ecosystem-rsses on TAT - TextAndTag Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://ovh.github.io/tat/ecosystem/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ecosystem</title>
      <link>https://ovh.github.io/tat/ecosystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/</guid>
      <description>

&lt;h3 id=&#34;chapter-6&#34;&gt;Chapter 6&lt;/h3&gt;

&lt;h1 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Al2Tat</title>
      <link>https://ovh.github.io/tat/ecosystem/al2tat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/al2tat/</guid>
      <description>

&lt;p&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/ovh/tat/master/tat.png&#34;&gt;&lt;/p&gt;

&lt;p&gt;This microservice can be used :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to send alerts to Tat (&lt;a href=&#34;https://github.com/ovh/tat&#34;&gt;https://github.com/ovh/tat&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;to send monitoring events to Tat.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;alerts&#34;&gt;Alerts&lt;/h2&gt;

&lt;p&gt;An alert is an event with a &amp;lsquo;AL&amp;rsquo; status. An alert can be replayed, al2tat attach
this on a root message. If there is a new occurrence with same summary with
&amp;lsquo;UP&amp;rsquo; status, alert will be closed.
Best Tat view for theses: StandardView (&lt;a href=&#34;https://github.com/ovh/tatwebui-plugin-standardview&#34;&gt;https://github.com/ovh/tatwebui-plugin-standardview&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Compute Replay: if alarm already exists, the replay will be a reply of root alarm&lt;/li&gt;
&lt;li&gt;Pre-select Label :

&lt;ul&gt;
&lt;li&gt;a new alarm &amp;ldquo;AL&amp;rdquo; will receive label &amp;ldquo;open&amp;rdquo; with red color on tat&lt;/li&gt;
&lt;li&gt;a new alarm &amp;ldquo;UP&amp;rdquo; will receive label &amp;ldquo;done&amp;rdquo; with green color on tat&lt;/li&gt;
&lt;li&gt;A new alarm &amp;ldquo;AL&amp;rdquo; will close previous &amp;ldquo;AL&amp;rdquo; in same thread&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;monitoring-events&#34;&gt;Monitoring Events&lt;/h2&gt;

&lt;p&gt;An event monitoring is attached to one item (host, soft, person&amp;hellip; whatever), all events are held three days, and only 30 events are retained after 3d. Best Tat view for theses: Monitoring View (&lt;a href=&#34;https://github.com/ovh/tatwebui-plugin-monitoringview&#34;&gt;https://github.com/ovh/tatwebui-plugin-monitoringview&lt;/a&gt;)&lt;/p&gt;

&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;

&lt;h2 id=&#34;alert&#34;&gt;Alert&lt;/h2&gt;

&lt;h3 id=&#34;store-new-alert&#34;&gt;Store new alert&lt;/h3&gt;

&lt;p&gt;If &lt;code&gt;Tat_topic == &amp;quot;&amp;quot;&lt;/code&gt;, default value is &lt;code&gt;/Internal/Alerts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -XPOST \
    -H &amp;quot;Content-Type: application/json&amp;quot; \
    -H &amp;quot;Tat_username: yourTatUser&amp;quot; \
    -H &amp;quot;Tat_password: yourTatPassword&amp;quot; \
    -H &amp;quot;Tat_topic: /Internal/Alerts&amp;quot; \
    -d &#39;{
    &amp;quot;status&amp;quot;: &amp;quot;AL&amp;quot;,
    &amp;quot;nbAlert&amp;quot;: 1,
    &amp;quot;service&amp;quot;: &amp;quot;YourService&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;your alert description here&amp;quot;
}&#39; http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/alert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nbAlert&lt;/code&gt; can be used to represent the number of elements impacted by your alert.
It is not used to compute alert&amp;rsquo;s repetitions.&lt;/p&gt;

&lt;h3 id=&#34;store-new-alert-with-a-label&#34;&gt;Store new alert with a label&lt;/h3&gt;

&lt;p&gt;If &lt;code&gt;Tat_topic == &amp;quot;&amp;quot;&lt;/code&gt;, default value is &lt;code&gt;/Internal/Alerts&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -XPOST \
    -H &amp;quot;Content-Type: application/json&amp;quot; \
    -H &amp;quot;Tat_username: tatusername&amp;quot; \
    -H &amp;quot;Tat_password: tatpassword&amp;quot; \
    -H &amp;quot;Tat_topic: /Internal/Alerts&amp;quot; \
    -d &#39;{
    &amp;quot;status&amp;quot;: &amp;quot;AL&amp;quot;,
    &amp;quot;nbAlert&amp;quot;: 3,
    &amp;quot;service&amp;quot;: &amp;quot;YourService&amp;quot;,
    &amp;quot;labels&amp;quot;: [{&amp;quot;text&amp;quot;: &amp;quot;critical:high&amp;quot;, &amp;quot;color&amp;quot;:&amp;quot;#d04437&amp;quot;}],
    &amp;quot;summary&amp;quot;: &amp;quot; your alert description here&amp;quot;
}&#39; http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/alert
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sync-vs-async&#34;&gt;Sync vs Async&lt;/h3&gt;

&lt;p&gt;POST on &lt;code&gt;http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/alert&lt;/code&gt;: send asynchronous to tat engine.&lt;/p&gt;

&lt;p&gt;POST on &lt;code&gt;http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/alert/sync&lt;/code&gt;: send synchronous to tat engine, and return message&lt;/p&gt;

&lt;h3 id=&#34;purge-alerts&#34;&gt;Purge alerts&lt;/h3&gt;

&lt;p&gt;You have to call endpoint: &lt;code&gt;/purge/:skip/:limit&lt;/code&gt; to purge Tat_topic, for keeping
30 replies on each alerts.&lt;/p&gt;

&lt;p&gt;Purge example the last 100 alerts on tat :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -XPUT \
    -H &amp;quot;Content-Type: application/json&amp;quot; \
    -H &amp;quot;Tat_username: tatusername&amp;quot; \
    -H &amp;quot;Tat_password: tatpassword&amp;quot; \
    -H &amp;quot;Tat_topic: /Internal/Alerts&amp;quot;
}&#39; http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/purge/0/100

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h2&gt;

&lt;h3 id=&#34;store-a-new-event&#34;&gt;Store a new event&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl -XPOST \
    -H &amp;quot;Content-Type: application/json&amp;quot; \
    -H &amp;quot;Tat_username: yourTatUser&amp;quot; \
    -H &amp;quot;Tat_password: yourTatPassword&amp;quot; \
    -H &amp;quot;Tat_topic: /Internal/Monitoring&amp;quot; \
    -d &#39;{
    &amp;quot;status&amp;quot;: &amp;quot;AL&amp;quot;,
    &amp;quot;item&amp;quot;: &amp;quot;yourApplication&amp;quot;,
    &amp;quot;service&amp;quot;: &amp;quot;SERVICE&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;your description&amp;quot;,
    &amp;quot;labels&amp;quot;: [{&amp;quot;text&amp;quot;: &amp;quot;critical:high&amp;quot;, &amp;quot;color&amp;quot;:&amp;quot;#d04437&amp;quot;}]
}&#39; http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/monitoring
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;with :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;status: AL or UP
service: your service
summary: description of event
item: your application name, or host...
labels: facultative, add labels to message root, the first message sent for an item.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sync-vs-async-1&#34;&gt;Sync vs Async&lt;/h3&gt;

&lt;p&gt;POST on &lt;code&gt;http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/monitoring&lt;/code&gt;: send asynchronous to tat engine.&lt;/p&gt;

&lt;p&gt;POST on &lt;code&gt;http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/monitoring/sync&lt;/code&gt;: send synchronous to tat engine, and return message&lt;/p&gt;

&lt;h2 id=&#34;system&#34;&gt;System&lt;/h2&gt;

&lt;h3 id=&#34;version&#34;&gt;Version&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;curl -XGET http://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage-1&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;building&#34;&gt;Building&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p $GOPATH/src/github.com/ovh
cd $GOPATH/src/github.com/ovh
git clone git@github.com:ovh/tat-contrib.git
cd tat-contrib/al2tat
go build
./al2tat -h
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./al2tat -h
Run Al2Tat

Usage:
  al2tat [flags]
  al2tat [command]

Available Commands:
  version     Print the version.

Flags:
      --listen-port string      Tat Engine Listen Port (default &amp;quot;8082&amp;quot;)
      --log-level string        Log Level : debug, info or warn
      --production              Production mode
      --url-tat-engine string   URL Tat Engine (default &amp;quot;http://localhost:8080&amp;quot;)

Use &amp;quot;al2tat [command] --help&amp;quot; for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;environment&#34;&gt;Environment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AL2TAT_LISTEN_PORT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export AL2TAT_LISTEN_PORT=8181 &amp;amp;&amp;amp; ./al2tat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is same than&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./al2tat --listen-port=&amp;quot;8181&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;examples-for-posting-an-alert&#34;&gt;Examples for POSTing an alert&lt;/h1&gt;

&lt;h2 id=&#34;perl-version&#34;&gt;Perl version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;package AL2TAT;

use Exporter qw(import);

our @EXPORT_OK = qw(run getMessage);

use strict;
use warnings;
use LWP::UserAgent;

sub run
{
  my &amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/alert&amp;quot;;
  my $TAT_TOPIC_KEY = &amp;quot;/Private/yourTopic&amp;quot;;
  my $TAT_USER_KEY = &amp;quot;yourUsernameOnTat&amp;quot;;
  my $TAT_PASSWORD_KEY = &amp;quot;yourTatVeryLongPasswordHere&amp;quot;;

  my $message = getMessage();
  sendMessage($TAT_URL_KEY, $TAT_TOPIC_KEY, $TAT_USER_KEY, $TAT_PASSWORD_KEY, $message);
}

sub sendMessage
{
    my $url = $_[0];
    my $topic = $_[1];
    my $user = $_[2];
    my $password = $_[3];
    my $message = $_[4];

    my $req = HTTP::Request-&amp;gt;new(POST =&amp;gt; $url);
    $req-&amp;gt;header(&#39;Content-Type&#39; =&amp;gt; &#39;application/json&#39;);
    $req-&amp;gt;header(&#39;Tat_username&#39; =&amp;gt; $user);
    $req-&amp;gt;header(&#39;Tat_password&#39; =&amp;gt; $password);
    $req-&amp;gt;header(&#39;Tat_topic&#39; =&amp;gt; $topic);

    my $post_data = &#39;{&amp;quot;status&amp;quot;: &amp;quot;AL&amp;quot;, &amp;quot;nbAlert&amp;quot;: 1, &amp;quot;service&amp;quot;: &amp;quot;TEST&amp;quot;, &amp;quot;summary&amp;quot;: &amp;quot;&#39;.$message.&#39;&amp;quot;}&#39;;
    $req-&amp;gt;content($post_data);

    my $ua = LWP::UserAgent-&amp;gt;new;
    my $resp = $ua-&amp;gt;request($req);

    print &amp;quot;Response Status: &amp;quot;, $resp-&amp;gt;code, &amp;quot;\n&amp;quot;;
    if ($resp-&amp;gt;is_success) {
        my $message = $resp-&amp;gt;decoded_content;
        print &amp;quot;Received reply: $message\n&amp;quot;;
    } else {
        print &amp;quot;HTTP POST error message: &amp;quot;, $resp-&amp;gt;message, &amp;quot;\n&amp;quot;;
    }
}

sub getMessage
{
    return &amp;quot;Message from perl &amp;quot;;
}

run()

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Mail2Tat</title>
      <link>https://ovh.github.io/tat/ecosystem/mail2tat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/mail2tat/</guid>
      <description>

&lt;p&gt;Create a message on Tat by sending a mail. Mail2tat check an imap account
and create a message for each mail received.&lt;/p&gt;

&lt;h2 id=&#34;tat-configuration&#34;&gt;Tat Configuration&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add Read Write to user tat.system.mail on your destination topic&lt;/li&gt;
&lt;li&gt;Check option : &amp;ldquo;System User can force dateCreation of message ?&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;simple-usage&#34;&gt;Simple usage&lt;/h2&gt;

&lt;p&gt;Send a mail to tat@your-domain with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subjet : &amp;lt;topicName&amp;gt;
Body : text of message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example of subject : &lt;code&gt;/Internal/YourTopic&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;thread-on-tat&#34;&gt;Thread on Tat&lt;/h2&gt;

&lt;p&gt;Send a mail to tat@your-domain with :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;subjet : &amp;lt;topicName&amp;gt;,&amp;lt;idGroup&amp;gt;
Body: text of message
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example of subject: &lt;code&gt;/Internal/YourTopic,something&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;

&lt;p&gt;Time between sending mail and post on tat ? Each minute : check mail and send on tat.
Restriction on From ? Yes, see arg  : only @your-domain. All mail received from another domain are not send on tat.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;building&#34;&gt;Building&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p $GOPATH/src/github.com/ovh
cd $GOPATH/src/github.com/ovh
git clone git@github.com:ovh/tat-contrib.git
cd tat-contrib/mail2tat/api
go build
./api -h
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./api -h
MAIL2TAT - Mail to Tat

Usage:
  mail2tat [flags]

Flags:
      --activate-cron                Activate Cron (default true)
      --imap-host string             IMAP Host
      --imap-password string         IMAP Password
      --imap-username string         IMAP Username
      --listen-port string           RunKPI Listen Port (default &amp;quot;8084&amp;quot;)
      --log-level string             Log Level : debug, info or warn
      --password-tat-engine string   Password Tat Engine
      --production                   Production mode
      --url-tat-engine string        URL Tat Engine (default &amp;quot;http://localhost:8080&amp;quot;)
      --username-tat-engine string   Username Tat Engine
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>tat2xmpp</title>
      <link>https://ovh.github.io/tat/ecosystem/tat2xmpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/tat2xmpp/</guid>
      <description>

&lt;h2 id=&#34;tat-configuration&#34;&gt;TAT configuration&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
[...]
# TAT 2 XMPP Configuration
TAT_TAT2XMPP_USERNAME=tat.system.jabber
TAT_TAT2XMPP_URL=http://tat2xmpp.your-domain
TAT_TAT2XMPP_KEY=a-key-used-by-tat2xmpp
[...]

# Running TAT Engine
./api
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tat2xmpp-configuration&#34;&gt;TAT2XMPP Configuration&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TAT2XMPP_LISTEN_PORT=8080
TAT2XMPP_HOOK_KEY=a-key-used-by-tat2xmpp
TAT2XMPP_USERNAME_TAT_ENGINE=tat.system.jabber
TAT2XMPP_XMPP_BOT_PASSWORD=password-of-bot-user-on-xmpp
TAT2XMPP_PRODUCTION=true
TAT2XMPP_PASSWORD_TAT_ENGINE=very-long-tat-password-of-tat.system.jabber
TAT2XMPP_XMPP_BOT_JID=robot.tat@your-domain
TAT2XMPP_XMPP_SERVER=your-jabber-server:5222
TAT2XMPP_URL_TAT_ENGINE=http://tat.your-domain

# Running TAT2XMPP
./tat2xmpp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;h3 id=&#34;building&#34;&gt;Building&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p $GOPATH/src/github.com/ovh
cd $GOPATH/src/github.com/ovh
git clone git@github.com:ovh/tat-contrib.git
cd tat-contrib/tat2xmpp/api
go build
./api -h
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;flags&#34;&gt;Flags&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
./api -h
Tat2XMPP

Usage:
  tat2xmpp [flags]
  tat2xmpp [command]

Available Commands:
  version     Print the version.

Flags:
  -c, --configFile string            configuration file
      --hook-key string              Hook Key, for using POST http://&amp;lt;url&amp;gt;/hook endpoint, with Header TAT2XMPPKEY
      --listen-port string           RunKPI Listen Port (default &amp;quot;8088&amp;quot;)
      --log-level string             Log Level : debug, info or warn
      --password-tat-engine string   Password Tat Engine
      --production                   Production mode
      --url-tat-engine string        URL Tat Engine (default &amp;quot;http://localhost:8080&amp;quot;)
      --username-tat-engine string   Username Tat Engine (default &amp;quot;tat.system.xmpp&amp;quot;)
      --xmpp-bot-jid string          XMPP Bot JID (default &amp;quot;tat@localhost&amp;quot;)
      --xmpp-bot-password string     XMPP Bot Password
      --xmpp-debug                   XMPP Debug
      --xmpp-insecure-skip-verify    XMPP InsecureSkipVerify (default true)
      --xmpp-notls                   XMPP No TLS (default true)
      --xmpp-server string           XMPP Server
      --xmpp-session                 XMPP Session (default true)
      --xmpp-starttls                XMPP Start TLS

Use &amp;quot;tat2xmpp [command] --help&amp;quot; for more information about a command.

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>