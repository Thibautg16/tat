<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ecosystems on TAT - TextAndTag Documentation</title>
    <link>https://ovh.github.io/tat/ecosystem/</link>
    <description>Recent content in Ecosystems on TAT - TextAndTag Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ovh.github.io/tat/ecosystem/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ecosystem</title>
      <link>https://ovh.github.io/tat/ecosystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/</guid>
      <description> Chapter 6 Ecosystem </description>
    </item>
    
    <item>
      <title>al2tat</title>
      <link>https://ovh.github.io/tat/ecosystem/al2tat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/al2tat/</guid>
      <description>This microservice can be used :
 to send alerts to Tat (https://github.com/ovh/tat). to send monitoring events to Tat.  Alerts An alert is an event with a &amp;lsquo;AL&amp;rsquo; status. An alert can be replayed, al2tat attach this on a root message. If there is a new occurrence with same summary with &amp;lsquo;UP&amp;rsquo; status, alert will be closed. Best Tat view for theses: StandardView (https://github.com/ovh/tatwebui-plugin-standardview)
 Compute Replay: if alarm already exists, the replay will be a reply of root alarm Pre-select Label :  a new alarm &amp;ldquo;AL&amp;rdquo; will receive label &amp;ldquo;open&amp;rdquo; with red color on tat a new alarm &amp;ldquo;UP&amp;rdquo; will receive label &amp;ldquo;done&amp;rdquo; with green color on tat A new alarm &amp;ldquo;AL&amp;rdquo; will close previous &amp;ldquo;AL&amp;rdquo; in same thread   Monitoring Events An event monitoring is attached to one item (host, soft, person&amp;hellip; whatever), all events are held three days, and only 30 events are retained after 3d.</description>
    </item>
    
    <item>
      <title>mail2tat</title>
      <link>https://ovh.github.io/tat/ecosystem/mail2tat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/mail2tat/</guid>
      <description>Create a message on Tat by sending a mail. Mail2tat check an imap account and create a message for each mail received.
Tat Configuration  Add Read Write to user tat.system.mail on your destination topic Check option : &amp;ldquo;System User can force dateCreation of message ?&amp;rdquo;  Simple usage Send a mail to tat@your-domain with
subjet : &amp;lt;topicName&amp;gt; Body : text of message  Example of subject : /Internal/YourTopic</description>
    </item>
    
    <item>
      <title>tat2es</title>
      <link>https://ovh.github.io/tat/ecosystem/tat2es/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/tat2es/</guid>
      <description>Get messages from TAT and send them to ElasticSearch.
TAT2ES Configuration export TAT2ES_LISTEN_PORT=&amp;quot;8080&amp;quot; export TAT2ES_USERNAME_TAT_ENGINE=&amp;quot;tat.system.jabber&amp;quot; export TAT2ES_PRODUCTION=true export TAT2ES_PASSWORD_TAT_ENGINE=&amp;quot;very-long-tat-password-of-tat.system.jabber&amp;quot; export TAT2ES_URL_TAT_ENGINE=&amp;quot;http://tat.your-domain&amp;quot; export TAT2ES_TOPICS_INDEXES=&amp;quot;/Topic/Sub-Topic1:ES_Index1,/Topic/Sub-Topic2:ES_Index2&amp;quot; # Run TAT2ES ./api -h  Usage Building mkdir -p $GOPATH/src/github.com/ovh cd $GOPATH/src/github.com/ovh git clone git@github.com:ovh/tat-contrib.git cd tat-contrib/tat2es/api go build ./api -h  Flags ./api -h TAT To ElasticSearch Usage: tat2es [flags] tat2es [command] Available Commands: version Print the version. Flags: --cron-schedule string Cron Schedule, see https://godoc.</description>
    </item>
    
    <item>
      <title>tat2xmpp</title>
      <link>https://ovh.github.io/tat/ecosystem/tat2xmpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/tat2xmpp/</guid>
      <description>What&amp;rsquo;s for? tat2xmpp allow you to:
 sync XMPP conference with a Tat topic, from conference to tat, from tat to conference, or both. request Tat over XMPP  On your XMPP Client:
/tat help  will returns:
Begin conversation with &amp;quot;tat,&amp;quot; or &amp;quot;/tat&amp;quot; Simple request: &amp;quot;tat, ping&amp;quot; Request tat: &amp;quot;/tat COUNT /Internal/Alerts?tag=NETWORK,label=open&amp;quot; &amp;quot;/tat GET /Internal/Alerts?tag=PUBCLOUD-serv,PUBCLOUD-host&amp;amp;label=open&amp;quot; Request tat and format output: &amp;quot;/tat COUNT /Internal/Alerts?tag=NETWORK,label=open format:dateUpdate,username,text&amp;quot; Default format:dateUpdate,username,text,labels You can use: id,text,topic,inReplyOfID,inReplyOfIDRoot,nbLikes,labels, votersUP,votersDown,nbVotesUP,nbVotesDown,userMentions, urls,tags,dateCreation,dateUpdate,username,fullname,nbReplies,tatwebuiURL User tat.</description>
    </item>
    
    <item>
      <title>tatdashing</title>
      <link>https://ovh.github.io/tat/ecosystem/tatdashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/tatdashing/</guid>
      <description>Overview Each 30seconds, tatDashing computes dashboard. This uService gets information on tat and &amp;ldquo;relabel&amp;rdquo; messages on your dashing topic.
Build And Run Configuration export TATDASHING_PRODUCTION=true export TATDASHING_LISTEN_PORT=8080 export TATDASHING_PASSWORD_TAT_ENGINE=&amp;quot;very-long-tat-password-of-tat.system.dashing&amp;quot; export TATDASHING_URL_TAT_ENGINE=&amp;quot;http://tat.your-domain&amp;quot; export TATDASHING_USERNAME_TAT_ENGINE=&amp;quot;tat.system.dashing&amp;quot; # Run TatDashing ./api -h  Build mkdir -p $GOPATH/src/github.com/ovh cd $GOPATH/src/github.com/ovh git clone git@github.com:ovh/tat-contrib.git cd tat-contrib/tatdashing/api go build ./api -h  Flags $ ./api -h Tat Dashing Usage: tatdashing [flags] Flags: --listen-port string Listen Port (default &amp;quot;8085&amp;quot;) --log-level string Log Level : debug, info or warn --password-tat-engine string Password Tat Engine --production Production mode --url-tat-engine string URL Tat Engine (default &amp;quot;http://localhost:8080&amp;quot;) --username-tat-engine string Username Tat Engine (default &amp;quot;tat.</description>
    </item>
    
  </channel>
</rss>